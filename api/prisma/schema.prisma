// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @unique @default(uuid())
  email            String      @unique
  username         String?
  posts            Post[]      @relation("author")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  password         String
  refreshToken     String      @default("")
  profile          Profile?
  sentMessages     Message[]   @relation(name: "sender")
  receivedMessages Message[]   @relation(name: "receiver")
  comments         Comment[]
  Like             Like[]
  Following        Followers[] @relation(name: "following")
  Followers        Followers[] @relation(name: "followers")
}

model Post {
  id        String    @id @default(uuid())
  content   String?
  author    User?     @relation(name: "author", fields: [authorId], references: [id])
  authorId  String?
  picture   String?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]    @relation(name: "likes")
}

model Profile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id]) 
  userId         String   @unique
  bio            String?
  status         String?
  gender         GENDER
  profilePicture String  @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(name: "sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId String
}

enum GENDER {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

model Comment {
  id         String   @id @default(uuid())
  comment    String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  post       Post?    @relation(fields: [postId], references: [id])
  postId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shareCount Int?     @default(0)
}

model Like {
  id        String   @id @default(uuid())
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(name: "likes", fields: [postId], references: [id])
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Followers {
  id        String   @id @default(uuid())
  user      User?    @relation(name: "following", fields: [userId], references: [id])
  userId    String?  @unique
  followers User[]   @relation(name: "followers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
